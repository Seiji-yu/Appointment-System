import { TracerProvider } from '@opentelemetry/api';

/**
 * Utility type to make all properties in T required recursively.
 * Keeps the types as-is but removes the optionality.
 */
type DeepRequired<T> = T extends Array<infer U> ? Array<U> : T extends (...args: any[]) => any ? T : T extends object ? {
    [P in keyof T]-?: DeepRequired<T[P]>;
} : T;
/**
 * Axiom API connection configuration
 */
interface AxiomConnectionConfig {
    /**
     * Axiom API URL
     * @default 'https://api.axiom.co'
     * @example 'https://api.axiom.co'
     */
    url?: string;
    /**
     * Axiom API token (can be undefined if not set)
     * @example process.env.AXIOM_TOKEN
     */
    token?: string | undefined;
    /**
     * Axiom dataset name
     * @example process.env.AXIOM_DATASET
     */
    dataset?: string;
}
/**
 * Options passed to the instrumentation hook
 * - url: string
 * - token: string
 * - dataset: string
 */
interface AxiomEvalInstrumentationOptions {
    url: string;
    token: string;
    dataset: string;
}
/**
 * Result returned from the instrumentation hook
 * - provider: TracerProvider
 */
interface AxiomEvalInstrumentationResult {
    provider: TracerProvider;
}
/**
 * Hook function to initialize application OpenTelemetry instrumentation.
 * Called before eval execution with resolved Axiom connection details.
 *
 * @param options - Configuration options
 * @param options.url - Axiom API URL
 * @param options.token - Axiom API token
 * @param options.dataset - Axiom dataset name
 * @returns TracerProvider or Promise resolving to TracerProvider
 *
 * @example
 * ```typescript
 * instrumentation: ({ url, token, dataset }) => {
 *   return setupAppInstrumentation({ url, token, dataset });
 * }
 * ```
 */
type AxiomEvalInstrumentationHook = (options: AxiomEvalInstrumentationOptions) => AxiomEvalInstrumentationResult | Promise<AxiomEvalInstrumentationResult>;
interface AxiomConfigBase {
    /**
     * Eval configuration settings
     *
     * @example
     * ```typescript
     * eval: {
     *   url: process.env.AXIOM_URL,
     *   token: process.env.AXIOM_TOKEN,
     *   dataset: process.env.AXIOM_DATASET
     * }
     * ```
     */
    eval?: AxiomConnectionConfig & {
        /**
         * Optional hook to initialize application OpenTelemetry instrumentation.
         * Called before eval execution with resolved Axiom connection details.
         * Return your configured tracer provider/tracer (or void) after registering them.
         */
        instrumentation?: AxiomEvalInstrumentationHook | null;
        /**
         * Timeout for eval execution in milliseconds
         * @default 60000
         */
        timeoutMs?: number;
        /**
         * Glob patterns to include when running evals
         * @default ['**\/*.eval.{ts,js,mts,mjs,cts,cjs}']
         * @example ['**\/*.eval.ts', 'tests/**\/*.test.ts']
         */
        include?: string[];
        /**
         * Glob patterns to exclude when running evals
         * @default ['**\/node_modules/**', '**\/dist/**', '**\/build/**']
         * @example ['**\/node_modules/**', '**\/.next/**']
         */
        exclude?: string[];
    };
}
/**
 * Resolved Axiom AI SDK configuration with all required keys.
 * This is the type returned after merging user config with defaults.
 *
 * Uses DeepRequired to ensure all optional properties from AxiomConfigBase
 * become required, preventing missing properties in the resolved config.
 */
type ResolvedAxiomConfig = DeepRequired<AxiomConfigBase>;
/**
 * Axiom AI SDK configuration with optional environment-specific overrides.
 *
 * Supports c12 environment overrides using $development, $production, etc.
 *
 * @example
 * ```typescript
 * export default defineConfig({
 *   eval: {
 *     url: process.env.AXIOM_URL,
 *     token: process.env.AXIOM_TOKEN,
 *     dataset: process.env.AXIOM_DATASET,
 *   },
 * })
 * ```
 */
interface AxiomConfig extends AxiomConfigBase {
    /**
     * Allow c12 environment-specific overrides ($development, $production, $test etc.)
     * but don't show them in autocomplete for now
     */
    [key: `$${string}`]: Partial<AxiomConfigBase> | undefined;
}
/**
 * Type-safe helper for defining Axiom configuration.
 *
 * @param config - The configuration object
 * @returns The same configuration object with type checking
 *
 * @example
 * ```typescript
 * import { defineConfig } from 'axiom/ai/config';
 *
 * export default defineConfig({
 *   eval: {
 *     url: process.env.AXIOM_URL,
 *     token: process.env.AXIOM_TOKEN,
 *     dataset: process.env.AXIOM_DATASET,
 *     include: ['**\/*.eval.{ts,js}'],
 *     instrumentation: ({ url, token, dataset }) => setupAppInstrumentation({ url, token, dataset }),
 *   },
 * });
 * ```
 */
declare function defineConfig(config: AxiomConfig): AxiomConfig;

export { type AxiomConfig as A, type ResolvedAxiomConfig as R, type AxiomEvalInstrumentationHook as a, defineConfig as d };
